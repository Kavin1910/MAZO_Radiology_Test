
import React, { useState } from 'react';
import { Mail, MessageSquare, Download, Send } from 'lucide-react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { type MedicalCase } from '@/hooks/useMedicalCases';
import { useToast } from '@/hooks/use-toast';

interface FinalReportDialogProps {
  case: MedicalCase;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export const FinalReportDialog: React.FC<FinalReportDialogProps> = ({ 
  case: caseData, 
  open, 
  onOpenChange 
}) => {
  const [emailRecipient, setEmailRecipient] = useState('');
  const [smsNumber, setSmsNumber] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSending, setIsSending] = useState(false);
  const { toast } = useToast();

  const generateReport = () => {
    const reportDate = new Date().toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const studyDate = new Date(caseData.createdAt).toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });

    return `
MEDICAL IMAGING REPORT

MAZO RADIOLOGY CENTER
Advanced Medical Imaging Services
Report Date: ${reportDate}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

PATIENT INFORMATION:
Patient Name: ${caseData.patientName}
Patient ID: ${caseData.patientId}
Study Date: ${studyDate}
Report Date: ${reportDate}

EXAMINATION DETAILS:
Imaging Modality: ${caseData.imageType}
Body Region Examined: ${caseData.bodyPart}
Clinical Priority: ${caseData.priority.charAt(0).toUpperCase() + caseData.priority.slice(1)}
Study Status: ${caseData.status.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

IMAGING FINDINGS:
${caseData.findings || 'The imaging study demonstrates normal anatomical structures without evidence of acute pathology. No significant abnormalities are identified within the examined region.'}

${caseData.assignedTo ? `REVIEWING RADIOLOGIST:\n${caseData.assignedTo}\n` : ''}
CLINICAL CORRELATION:
Clinical correlation with patient symptoms and physical examination findings is recommended. If symptoms persist or worsen, follow-up imaging or additional diagnostic studies may be warranted.

RECOMMENDATIONS:
${caseData.priority === 'critical' ? 
  '• Immediate clinical correlation and urgent follow-up recommended\n• Consider immediate specialist consultation if clinically indicated' :
  caseData.priority === 'high' ?
  '• Clinical correlation recommended\n• Follow-up as clinically indicated' :
  '• Routine clinical follow-up as appropriate\n• No immediate action required based on imaging findings'
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

DISCLAIMER:
This report has been reviewed by qualified medical professionals. This report should be interpreted in conjunction with clinical findings and other relevant diagnostic information. If you have any questions about this report, please contact your healthcare provider.

For urgent medical concerns, please contact your physician immediately or seek emergency medical care.

Report generated by: Mazo Radiology Center
Report ID: MR-${caseData.patientId}-${Date.now()}
    `.trim();
  };

  const fullReport = generateReport();

  const handleDownload = () => {
    setIsGenerating(true);
    setTimeout(() => {
      const blob = new Blob([fullReport], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `Medical_Report_${caseData.patientName.replace(/\s+/g, '_')}_${caseData.patientId}_${Date.now()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      setIsGenerating(false);
      
      toast({
        title: "Report Downloaded",
        description: "The professional medical report has been downloaded successfully.",
      });
    }, 1000);
  };

  const handleSendEmail = () => {
    if (!emailRecipient.trim()) {
      toast({
        title: "Email Required",
        description: "Please enter an email address.",
        variant: "destructive",
      });
      return;
    }

    setIsSending(true);
    setTimeout(() => {
      setIsSending(false);
      toast({
        title: "Email Sent",
        description: `Professional medical report sent to ${emailRecipient}`,
      });
      setEmailRecipient('');
    }, 2000);
  };

  const handleSendSMS = () => {
    if (!smsNumber.trim()) {
      toast({
        title: "Phone Number Required",
        description: "Please enter a phone number.",
        variant: "destructive",
      });
      return;
    }

    setIsSending(true);
    setTimeout(() => {
      setIsSending(false);
      toast({
        title: "SMS Sent",
        description: `Report notification sent to ${smsNumber}`,
      });
      setSmsNumber('');
    }, 2000);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-amber-100 text-amber-800 border-amber-200';
      case 'medium': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Professional Medical Report - {caseData.patientName}</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          <div className="p-4 border rounded-lg bg-slate-50">
            <h4 className="font-medium mb-3">Report Summary</h4>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>Patient:</span>
                <span>{caseData.patientName} ({caseData.patientId})</span>
              </div>
              <div className="flex justify-between">
                <span>Study Type:</span>
                <span>{caseData.imageType} - {caseData.bodyPart}</span>
              </div>
              <div className="flex justify-between items-center">
                <span>Priority:</span>
                <Badge className={getPriorityColor(caseData.priority)}>
                  {caseData.priority.toUpperCase()}
                </Badge>
              </div>
              {caseData.findings && (
                <div className="pt-2">
                  <span className="font-medium">Key Findings:</span>
                  <p className="mt-1 text-slate-600">{caseData.findings}</p>
                </div>
              )}
            </div>
          </div>

          <div className="space-y-4">
            <h4 className="font-medium">Complete Medical Report</h4>
            <div className="p-4 border rounded-lg bg-white max-h-96 overflow-y-auto">
              <pre className="whitespace-pre-wrap text-sm font-mono leading-relaxed">
                {fullReport}
              </pre>
            </div>
          </div>

          <div className="space-y-4">
            <h4 className="font-medium">Report Distribution</h4>
            
            <div className="space-y-3">
              <div className="flex space-x-2">
                <input
                  type="email"
                  placeholder="Enter patient or physician email"
                  value={emailRecipient}
                  onChange={(e) => setEmailRecipient(e.target.value)}
                  className="flex-1 p-2 border rounded-md"
                />
                <Button 
                  onClick={handleSendEmail} 
                  disabled={isSending}
                  size="sm"
                >
                  <Mail className="w-4 h-4 mr-2" />
                  {isSending ? 'Sending...' : 'Email Report'}
                </Button>
              </div>

              <div className="flex space-x-2">
                <input
                  type="tel"
                  placeholder="Enter phone number for notification"
                  value={smsNumber}
                  onChange={(e) => setSmsNumber(e.target.value)}
                  className="flex-1 p-2 border rounded-md"
                />
                <Button 
                  onClick={handleSendSMS} 
                  disabled={isSending}
                  size="sm"
                  variant="outline"
                >
                  <MessageSquare className="w-4 h-4 mr-2" />
                  {isSending ? 'Sending...' : 'SMS Alert'}
                </Button>
              </div>
            </div>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Close
          </Button>
          <Button 
            onClick={handleDownload} 
            disabled={isGenerating}
            variant="outline"
          >
            <Download className="w-4 h-4 mr-2" />
            {isGenerating ? 'Generating...' : 'Download Report'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};
